
import pandas as pd
from config import DB_EXPORT_PATH,CUSTOMER_DETAILS_PATH,CONVERSION_RATES
from logger import  logger

def join_and_transform():
    try:
        df_db= pd.read_csv(DB_EXPORT_PATH)
        df_local=pd.read_csv(CUSTOMER_DETAILS_PATH)

        # inner join
        df_joined = pd.merge(df_db, df_local, on="Account_Number", how="inner")

        #Transformation
        df_joined['Customer_Name']= df_joined['Customer_Name'].str.title()
        df_joined['Transaction_Date']=pd.to_datetime(df_joined['Transaction_Date'])
        df_joined['Transaction_Year']=pd.to_datetime(df_joined['Transaction_Date']).dt.year
        df_joined['Transaction_Month']=pd.to_datetime(df_joined['Transaction_Date']).dt.strftime('%b')
        df_joined['Currency']=df_joined['Currency'].str.upper()

        # filter active accounts
        df_active=df_joined[df_joined['Account_Status'] != 'Closed']

        # currency Conversion
        df_active['Transaction_Amount_USD'] = df_active.apply(
            lambda row: row['Transaction_Amount'] * CONVERSION_RATES.get(row['Currency'],1),
            axis=1
        )
        logger.info('Data joined and transformed successfully')
        return df_active
    except Exception as e:
        logger.error(f"Error in joining and transforming data.{e}")
        raise


-----

import pandas as pd
from config import CUSTOMER_DETAILS_PATH
from logger import logger

def create_customer_details_csv():
    try:
        customer_details_data={
                'Account_Number': [1001, 1002, 1003, 1004, 1005, 1006],
                'Customer_Email': ['john@example.com', 'alice@example.com', 'bob@example.com',
                                   'clara@example.com', 'daniel@example.com', 'extra@example.com'],
                'Customer_Phone': ['111-111-1111', '222-222-2222', '333-333-3333',
                                   '444-444-4444', '555-555-5555', '666-666-6666']
        }
        df_local=pd.DataFrame(customer_details_data)
        df_local.to_csv(CUSTOMER_DETAILS_PATH,index=False)
        logger.info(f'CUSTOMER_DETAILS_CSV created.{CUSTOMER_DETAILS_PATH}')
    except Exception as e:
        logger.error(f"Error creating customer details to csc.{e}")
        raise


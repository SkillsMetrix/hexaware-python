import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

DB_EXPORT_PATH = os.path.join(BASE_DIR, "db_export.csv")
FIXED_WIDTH_PATH = os.path.join(BASE_DIR, "customer_details.fwf")
JOIN_DATA_PATH = os.path.join(BASE_DIR, "join_data.csv")
FINAL_REPORT_PATH = os.path.join(BASE_DIR, "final_report.csv")

# Fixed-width column widths (adjust based on actual data)
FWF_WIDTHS = [15, 30, 10, 10, 15, 15, 15, 10, 15]
FWF_COLUMNS = [
    "Account_Number",
    "Customer_Name",
    "Branch_Code",
    "Transaction_Date",
    "Transaction_Type",
    "Transaction_Amount",
    "Balance",
    "Currency",
    "Account_Status",
]


----

import pandas as pd
from .config import FWF_WIDTHS, FWF_COLUMNS, FIXED_WIDTH_PATH

def read_fixed_width_file():
    """Reads a fixed-width format file into a DataFrame."""
    df = pd.read_fwf(
        FIXED_WIDTH_PATH,
        widths=FWF_WIDTHS,
        names=FWF_COLUMNS,
        dtype=str
    )
    return df





------

import pandas as pd
from .config import DB_EXPORT_PATH
from .file_utils import read_fixed_width_file

def join_and_transform_fwf():
    """Reads DB CSV & fixed-width file, joins, cleans, and aggregates."""
    db_df = pd.read_csv(DB_EXPORT_PATH)
    fwf_df = read_fixed_width_file()

    # Convert numeric columns
    fwf_df["Transaction_Amount"] = pd.to_numeric(fwf_df["Transaction_Amount"], errors="coerce")
    fwf_df["Balance"] = pd.to_numeric(fwf_df["Balance"], errors="coerce")

    # Clean Customer_Name (strip + remove unwanted chars)
    fwf_df["Customer_Name"] = (
        fwf_df["Customer_Name"]
        .str.strip()
        .str.replace(r"[^a-zA-Z\s]", "", regex=True)
        .str.title()
    )

    # Format Transaction_Date
    fwf_df["Transaction_Date"] = pd.to_datetime(
        fwf_df["Transaction_Date"], errors="coerce"
    ).dt.strftime("%Y-%m-%d")

    # Normalize Transaction_Type
    mapping = {
        "dep": "Deposit",
        "deposit": "Deposit",
        "wd": "Withdrawal",
        "withdraw": "Withdrawal",
        "tr": "Transfer",
        "transfer": "Transfer"
    }
    fwf_df["Transaction_Type"] = (
        fwf_df["Transaction_Type"].str.lower().map(mapping).fillna("Other")
    )

    # Join on Account_Number
    df = pd.merge(db_df, fwf_df, on="Account_Number", how="inner")

    # Group by Currency
    grouped_df = df.groupby("Currency")["Transaction_Amount"].sum().reset_index()

    return df, grouped_df



-----

from .config import JOIN_DATA_PATH, FINAL_REPORT_PATH

def save_fwf_reports(joined_df, grouped_df):
    """Save the joined data and grouped summary to CSV."""
    joined_df.to_csv(JOIN_DATA_PATH, index=False)
    grouped_df.to_csv(FINAL_REPORT_PATH, index=False)

-----


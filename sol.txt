
import sqlite3
import pandas as pd
from config import DB_PATH, DB_EXPORT_PATH
from logger import logger

def create_database():
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                Account_Number INTEGER,
                Customer_Name TEXT,
                Branch_Code TEXT,
                Transaction_Date TEXT,
                Transaction_Type TEXT,
                Transaction_Amount REAL,
                Balance REAL,
                Currency TEXT,
                Account_Status TEXT
            )
        """)

        transactions_data = [
            (1001, 'john DOE', 'B001', '2024-01-15', 'Deposit', 5000, 15000, 'usd', 'Active'),
            (1002, 'alice SMITH', 'B002', '2024-02-10', 'Withdrawal', 2000, 8000, 'inr', 'Active'),
            (1003, 'Bob Johnson', 'B001', '2024-02-22', 'Deposit', 3000, 12000, 'usd', 'Closed'),
            (1004, 'Clara Oswald', 'B003', '2024-03-05', 'Deposit', 7000, 20000, 'eur', 'Active'),
            (1005, 'Daniel White', 'B002', '2024-03-12', 'Withdrawal', 1500, 6500, 'usd', 'Active')
        ]
        cursor.executemany("""
            INSERT INTO transactions VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, transactions_data)

        conn.commit()
        conn.close()
        logger.info("Database created successfully.")
    except Exception as e:
        logger.error(f"Error creating database: {e}")
        raise

def export_db_to_csv():
   try:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    df= pd.read_sql_query("SELECT * FROM transactions", conn)
    df.to_csv(DB_EXPORT_PATH, index=False)
    conn.close()
    logger.info(f"Database exported successfully to CSV {DB_EXPORT_PATH}")
    return df
   except Exception as e:
       logger.error(f"Error exporting database: {e}")
       raise
---------

import os
from datetime import datetime

# Directories
TEMP_DIR ="temp"
LOG_DIR = "logs"
os.makedirs(TEMP_DIR, exist_ok=True)
os.makedirs(LOG_DIR, exist_ok=True)

# Paths
DB_PATH=os.path.join(TEMP_DIR, "banking.db")
DB_EXPORT_PATH=os.path.join(TEMP_DIR, "db_export.csv")
CUSTOMER_DETAILS_PATH=os.path.join(TEMP_DIR, "customer_details.csv")
FINAL_REPORT_PATH=os.path.join(TEMP_DIR, "final_report.csv")

# Logging
LOG_FILE=os.path.join(LOG_DIR, f"banking_pipeline_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")

# Currency Conversion
CONVERSION_RATES={
    "USD": 1.0,
    "INR": 0.012,
    "EUR": 1.08,
}
---------

import pandas as pd
from config import CUSTOMER_DETAILS_PATH
from logger import logger

def create_customer_details_csv():
    try:
        customer_details_data={
                'Account_Number': [1001, 1002, 1003, 1004, 1005, 1006],
                'Customer_Email': ['john@example.com', 'alice@example.com', 'bob@example.com',
                                   'clara@example.com', 'daniel@example.com', 'extra@example.com'],
                'Customer_Phone': ['111-111-1111', '222-222-2222', '333-333-3333',
                                   '444-444-4444', '555-555-5555', '666-666-6666']
        }
        df_local=pd.DataFrame(customer_details_data)
        df_local.to_csv(CUSTOMER_DETAILS_PATH,index=False)
        logger.info(f'CUSTOMER_DETAILS_CSV created.{CUSTOMER_DETAILS_PATH}')
    except Exception as e:
        logger.error(f"Error creating customer details to csc.{e}")
        raise

